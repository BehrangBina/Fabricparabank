// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace FabricParaBank.Tests.Fearures
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CustomerOnboardingAndBankingOperationsFeature : object, Xunit.IClassFixture<CustomerOnboardingAndBankingOperationsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Fearures", "Customer Onboarding and Banking Operations", "As a new user\r\nI want to register, log in, and perform basic banking tasks\r\nSo th" +
                "at I can use the core features of the Para Bank application", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AccountManagement.feature"
#line hidden
        
        public CustomerOnboardingAndBankingOperationsFeature(CustomerOnboardingAndBankingOperationsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
    #line hidden
#line 8
        await testRunner.GivenAsync("I navigate to the Para Bank application", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
        await testRunner.WhenAsync("I register a new user with a unique username", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
        await testRunner.ThenAsync("I can see welcome message on the screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
        await testRunner.ThenAsync("I logout from the system", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="End-to-end banking workflow for a newly registered user")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Onboarding and Banking Operations")]
        [Xunit.TraitAttribute("Description", "End-to-end banking workflow for a newly registered user")]
        public async global::System.Threading.Tasks.Task End_To_EndBankingWorkflowForANewlyRegisteredUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("End-to-end banking workflow for a newly registered user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 15
        await testRunner.WhenAsync("I login using the newly registered user credentials", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Navigation Links"});
                table1.AddRow(new string[] {
                            "Open New Account"});
                table1.AddRow(new string[] {
                            "Accounts Overview"});
                table1.AddRow(new string[] {
                            "Transfer Funds"});
                table1.AddRow(new string[] {
                            "Bill Pay"});
                table1.AddRow(new string[] {
                            "Find Transactions"});
                table1.AddRow(new string[] {
                            "Update Contact Info"});
                table1.AddRow(new string[] {
                            "Request Loan"});
                table1.AddRow(new string[] {
                            "Log Out"});
#line 17
        await testRunner.ThenAsync("I can validate global navigation menu for the logged in user", ((string)(null)), table1, "Then ");
#line hidden
#line 28
        await testRunner.WhenAsync("I create a new account of type \"Open New Account\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
        await testRunner.ThenAsync("I create a \"Savings\" account and validate it", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
        await testRunner.AndAsync("I click on \"Accounts Overview\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
        await testRunner.ThenAsync("the payment should be processed and balance updated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
        await testRunner.AndAsync("I click on \"Transfer Funds\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
        await testRunner.AndAsync("I transfer \"100\" from the created account", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
        await testRunner.ThenAsync("Transfer has been successfully completed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
        await testRunner.AndAsync("I click on \"Bill Pay\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
        await testRunner.WhenAsync("I pay a bill using the new account with \"120\" amount", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
        await testRunner.ThenAsync("I can verify the bill payment was successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
        await testRunner.WhenAsync("I Search transaction from the newly account created", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
        await testRunner.ThenAsync("the details displayed in the JSON response are valid", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CustomerOnboardingAndBankingOperationsFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CustomerOnboardingAndBankingOperationsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
